import React from "react";
import { Switch, Route, Redirect, withRouter } from "react-router-dom";
import { connect } from "react-redux";
import { createStructuredSelector } from "reselect";

import "./App.css";

import HomePage from "./pages/homepage/homepage.component";
import ShopPage from "./pages/shop/shop.component";
import CheckoutPage from "./pages/checkout/checkout.component";

import SignInAndSignUp from "./pages/sign-in-and-sign-up/sign-in-and-sign-up.component";
import Header from "./components/header/header.component.jsx";
import { auth, createUserProfileDocument } from "./firebase/firebase.util";
import { setCurrentUser } from "./redux/user/user.actions";
import { selectCurrentUser } from "./redux/user/user.selector";

// My unique imports:
import { AnimatePresence } from "framer-motion";

class App extends React.Component {
  unsubscribeFromAuth = null;

  componentDidMount() {
    const { setCurrentUser } = this.props;
    // We get a userAuth back
    this.unsubscribeFromAuth = auth.onAuthStateChanged(async (userAuth) => {
      // If userAuth object exists as userAuth could be null (signing out)
      if (userAuth) {
        // We get a userRef back from the function
        const userRef = await createUserProfileDocument(userAuth);

        // Get the data related to the user by using the .data() method
        // Below listens to any changes on user
        userRef.onSnapshot((snapShot) => {
          // setState has a chance of not fully finished being call as it is async
          // To fix this, we set a 2nd parameter (which is a function)

          setCurrentUser({
            id: snapShot.id,
            ...snapShot.data(),
          });
        });
      } else {
        // userAuth is null in this case, whenever the user signs out
        setCurrentUser(userAuth);
        // Note, there are properties in our data array that we want auto-generated by firebase
        // The map function would just return values we want to keep
        // addCollectionsAndDocuments(
        //   "collections",
        //   collectionsArray.map(({ title, items }) => ({ title, items }))
        // );
      }
    });
  }

  componentWillUnmount() {
    this.unsubscribeFromAuth();
  }

  render() {
    const { location } = this.props;

    return (
      // render below will determine what component to return BUT with js
      <div>
        <Header />
        <AnimatePresence>
          <Switch location={location} key={location.pathname}>
            <Route exact path="/" component={HomePage} />
            <Route path="/shop" component={ShopPage} />
            <Route exact path="/checkout" component={CheckoutPage} />
            <Route
              exact
              path="/signin"
              render={() =>
                this.props.currentUser ? (
                  <Redirect to="/" />
                ) : (
                  <SignInAndSignUp />
                )
              }
            />
          </Switch>
        </AnimatePresence>
      </div>
    );
  }
}

const mapStateToProps = createStructuredSelector({
  currentUser: selectCurrentUser,
});

const mapDispatchToProps = (dispatch) => ({
  setCurrentUser: (user) => dispatch(setCurrentUser(user)),
});

export default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));
